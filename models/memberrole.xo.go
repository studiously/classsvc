// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"
)

// MemberRole is the 'member_role' enum type from schema 'public'.
type MemberRole uint16

const (
	// MemberRoleStudent is the 'student' MemberRole.
	MemberRoleStudent = MemberRole(1)

	// MemberRoleModerator is the 'moderator' MemberRole.
	MemberRoleModerator = MemberRole(2)

	// MemberRoleTeacher is the 'teacher' MemberRole.
	MemberRoleTeacher = MemberRole(3)

	// MemberRoleAdministrator is the 'administrator' MemberRole.
	MemberRoleAdministrator = MemberRole(4)
)

// String returns the string value of the MemberRole.
func (mr MemberRole) String() string {
	var enumVal string

	switch mr {
	case MemberRoleStudent:
		enumVal = "student"

	case MemberRoleModerator:
		enumVal = "moderator"

	case MemberRoleTeacher:
		enumVal = "teacher"

	case MemberRoleAdministrator:
		enumVal = "administrator"
	}

	return enumVal
}

// MarshalText marshals MemberRole into text.
func (mr MemberRole) MarshalText() ([]byte, error) {
	return []byte(mr.String()), nil
}

// UnmarshalText unmarshals MemberRole from text.
func (mr *MemberRole) UnmarshalText(text []byte) error {
	switch string(text) {
	case "student":
		*mr = MemberRoleStudent

	case "moderator":
		*mr = MemberRoleModerator

	case "teacher":
		*mr = MemberRoleTeacher

	case "administrator":
		*mr = MemberRoleAdministrator

	default:
		return errors.New("invalid MemberRole")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for MemberRole.
func (mr MemberRole) Value() (driver.Value, error) {
	return mr.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for MemberRole.
func (mr *MemberRole) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid MemberRole")
	}

	return mr.UnmarshalText(buf)
}
