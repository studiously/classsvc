// Code generated by go-bindata.
// sources:
// postgres/1_init.sql
// DO NOT EDIT!

package ddl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _postgres1_initSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\x51\x6f\x82\x30\x14\x85\xdf\xfb\x2b\xee\x1b\x2c\xc3\x3f\xa0\x4f\x9d\x74\x0b\x19\x16\x87\x6d\x32\x9e\x08\xda\x9b\xad\x99\x80\x29\x25\x73\xff\x7e\x41\x0b\xc3\xa1\x89\x6f\xa4\xe7\xf6\xe3\x9c\xd3\x3b\x9b\xc1\x63\xa9\x3f\x4c\x61\x11\xe4\x81\x2c\x53\x46\x05\x03\x91\xad\x19\x94\x58\x6e\xd1\xe4\xa6\xde\x23\xd0\x0d\x30\x2e\x57\xbe\xd7\xd8\x56\x61\x65\xbd\xc0\x2b\x6b\x85\xa6\xb0\xb5\xf1\x02\xcf\x62\xb1\xfb\xc4\xee\xab\x50\xa5\xae\x74\x63\xcf\xca\xc3\x82\x0c\x48\xfa\x14\x33\xd8\xed\x8b\xa6\xc1\x06\x7c\x02\xa0\x15\xb4\xad\x56\xc0\x13\x01\x5c\xc6\x71\x40\x00\xaa\xa2\x44\xb0\x78\xb4\x17\xa7\xbb\xd6\x18\xac\x6c\xde\x56\xda\x9e\xee\x90\x0e\x4c\x63\xc1\x52\xc7\x4d\x78\x9c\xf5\x70\x02\x40\xc3\x10\x96\x09\xdf\x88\x94\x46\x5c\xf4\x42\x7e\xf8\xc2\x1f\x58\xa7\xd1\x8a\xa6\x19\xbc\xb2\x0c\x7c\xad\x26\x16\xcf\xb1\x6f\x5b\x6c\x1b\x34\xf9\x35\xe1\xf4\x97\xab\xca\xa9\xc2\x71\x9d\x21\x7b\xa6\x32\x16\x30\xd4\x39\x9f\x8f\xe5\xfe\x6e\x17\x73\x92\xd2\xf9\x9b\xa6\x74\xc2\xad\x94\x2e\x64\xc4\x43\xf6\x3e\xcc\xf6\x9e\x73\xad\x8e\x90\xf0\x21\xbc\xdc\x44\xfc\x05\xb6\xd6\x20\x82\xdf\x0f\xfd\x41\x24\x8f\xde\xe4\x7f\x96\x2b\xe6\x3e\xa6\x1b\x0e\x60\x0a\xbf\x4e\xbd\x03\xd6\x3d\xe5\x78\x9f\xc3\xfa\xbb\x22\x61\x9a\xac\x2f\x97\x6f\x31\x3e\x73\xbc\xc5\x6f\x00\x00\x00\xff\xff\x35\xc3\x48\xf4\x08\x03\x00\x00")

func postgres1_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_postgres1_initSql,
		"postgres/1_init.sql",
	)
}

func postgres1_initSql() (*asset, error) {
	bytes, err := postgres1_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres/1_init.sql", size: 776, mode: os.FileMode(420), modTime: time.Unix(1495409498, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"postgres/1_init.sql": postgres1_initSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"postgres": &bintree{nil, map[string]*bintree{
		"1_init.sql": &bintree{postgres1_initSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

