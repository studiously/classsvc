// Code generated by go-bindata.
// sources:
// ddl.go
// ddl_gen.go
// postgres/1_init.sql
// DO NOT EDIT!

package ddl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ddlGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x14\xc9\xc1\x09\x80\x30\x0c\x05\xd0\x7b\xa7\xc8\x02\x4d\xee\x2e\x23\xd1\x7c\x3e\x52\x49\x8a\x74\x7f\xa4\xa7\x77\x78\x66\xac\x83\x48\x7c\xbe\x20\xac\x7e\x3d\x19\xbe\x5c\xfa\x1c\x94\x88\x57\x7a\x6d\x4e\x22\x95\x25\x6a\xaa\xda\xa6\xdf\xc3\x89\x1d\xed\x0f\x00\x00\xff\xff\xef\x5c\x6f\xa3\x42\x00\x00\x00")

func ddlGoBytes() ([]byte, error) {
	return bindataRead(
		_ddlGo,
		"ddl.go",
	)
}

func ddlGo() (*asset, error) {
	bytes, err := ddlGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ddl.go", size: 66, mode: os.FileMode(420), modTime: time.Unix(1495558171, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ddl_genGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func ddl_genGoBytes() ([]byte, error) {
	return bindataRead(
		_ddl_genGo,
		"ddl_gen.go",
	)
}

func ddl_genGo() (*asset, error) {
	bytes, err := ddl_genGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ddl_gen.go", size: 0, mode: os.FileMode(436), modTime: time.Unix(1495641407, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgres1_initSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x93\xcd\x6e\xdb\x30\x10\x84\xef\x7a\x8a\x81\x2f\x76\x50\xe7\x05\xe2\x13\x23\xae\x03\xa1\x0a\xe5\x52\x24\x10\x9f\x04\xd5\x22\x5a\xa1\x91\x14\x50\x34\xd2\xbe\x7d\x41\x45\x7f\x8e\x5a\xc0\x30\x4f\x36\x87\x3b\x3b\xd8\x4f\x7b\x7f\x8f\x2f\x55\xf9\xc3\xe6\xce\x40\xbf\x05\xa1\x24\xa6\x08\xea\x78\x20\xe8\x94\x64\x26\x93\x98\xc0\x52\x90\xd0\xcf\xd8\xac\x5b\x77\x2e\x4c\xed\xd6\x5b\xac\xab\xa6\x30\x36\x77\x8d\xf5\x7f\x9c\xc9\x4f\x3f\x4d\xf7\x33\x2f\xaa\xb2\x2e\x5b\x37\x6a\xcd\x7b\x6d\xec\xfa\x6e\x17\x8c\xee\xec\x31\x26\x9c\x5e\xf3\xb6\x35\x2d\x36\x01\x50\x16\x98\x8e\xd6\x11\x87\x48\x14\x84\x8e\xe3\x6d\x00\xd4\x79\x65\x46\x55\xd1\x8b\xba\x50\x4f\x67\x6b\x4d\xed\xb2\x73\x5d\xba\xae\x36\xf0\xad\x58\xac\x48\xf6\x9d\x12\x11\x1f\x87\x76\x01\xc0\x38\x47\x98\x88\x54\x49\x16\x09\x35\x08\xd9\xdb\x2f\xf3\x07\x07\x19\x3d\x33\x79\xc4\x57\x3a\x62\x53\x16\x8b\xd0\x95\xa9\xbe\x1b\xfb\x29\x74\x17\xf8\x9a\x33\x8f\x7d\x6e\x8d\xcd\xbc\xc5\x4d\xd5\x5d\x68\x5f\x7e\x53\xb5\x6d\x5e\x3f\x06\x3a\x21\xe6\xb4\x67\x3a\x56\x18\x09\xe3\xe1\x61\x26\xcf\xab\xf7\x89\xa4\xe8\x49\x7c\xcc\x68\x35\x24\x59\xdd\x41\xd2\x9e\x24\x89\x90\xd2\x09\xee\xaa\x53\x12\x01\x4e\x31\x29\x42\xc8\xd2\x90\x71\xcf\x04\xfa\xc0\xd9\x74\xe3\xa9\x2d\xa0\xf5\xe3\x5e\x42\xeb\x85\xff\x41\xeb\x99\x45\x82\xd3\xcb\xf8\x76\x48\x9a\x95\xc5\xef\x00\x3e\xc1\x40\x53\xa7\x91\x78\xc2\xa3\x92\x44\xd8\x0c\xcf\x26\x1b\x2d\xa2\x6f\xfa\xb3\x5b\xcf\xef\x5a\xd7\xfe\xf9\x16\x4b\xfb\x7f\xfb\x5e\x65\xe7\xbf\xcf\xf9\x06\xf3\xe6\xbd\x0e\xb8\x4c\x0e\x97\x3b\xb6\x9b\xdf\xf5\x7e\xc3\xdd\xc5\xa6\xef\xfe\x06\x00\x00\xff\xff\x96\x24\xc9\xb2\x0f\x04\x00\x00")

func postgres1_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_postgres1_initSql,
		"postgres/1_init.sql",
	)
}

func postgres1_initSql() (*asset, error) {
	bytes, err := postgres1_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres/1_init.sql", size: 1039, mode: os.FileMode(420), modTime: time.Unix(1495641406, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ddl.go": ddlGo,
	"ddl_gen.go": ddl_genGo,
	"postgres/1_init.sql": postgres1_initSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"ddl.go": &bintree{ddlGo, map[string]*bintree{}},
	"ddl_gen.go": &bintree{ddl_genGo, map[string]*bintree{}},
	"postgres": &bintree{nil, map[string]*bintree{
		"1_init.sql": &bintree{postgres1_initSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

